{"version":3,"sources":["logo.svg","components/layout/signin.js","components/layout/signout.js","components/layout/Navbar.js","components/dashboard/notifications.js","components/project/projectsummary.js","components/project/projectlist.js","components/dashboard/dashboar.js","components/project/projectdetails.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","signin","className","to","signout","navbar","notifications","projectsummary","Fragment","class","projectlist","Dashboard","state","Component","projectdetails","App","Navbar","exact","path","component","ProjectDetails","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gKAAAA,EAAOC,QAAU,IAA0B,kC,uGCc5BC,EAXA,WACX,OAEI,wBAAIC,UAAU,SACV,gCAAK,kBAAC,IAAD,CAASC,GAAG,KAAZ,iBAAL,MACA,gCAAK,kBAAC,IAAD,CAASA,GAAG,KAAZ,aAAL,MACA,gCAAK,kBAAC,IAAD,CAASA,GAAG,IAAID,UAAU,yBAA1B,QAAL,QCKGE,EAXC,WACZ,OAEI,wBAAIF,UAAU,SACV,gCAAK,kBAAC,IAAD,CAASC,GAAG,KAAZ,aAAL,MACA,gCAAK,kBAAC,IAAD,CAASA,GAAG,KAAZ,YAAL,QCWGE,EAdA,WACX,OAEI,yBAAKH,UAAU,6BACX,yBAAKA,UAAU,aACX,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,cAAvB,oBACA,kBAAC,EAAD,MACA,kBAAC,EAAD,S,+CCDDI,EATO,WAClB,OAEE,+CCcSC,EAjBQ,WACnB,OAEE,kBAAC,IAAMC,SAAP,KACK,yBAAKN,UAAU,wCACd,yBAAKA,UAAU,yCACX,0BAAMA,UAAU,yBAAhB,IAAyC,0CAAzC,KACA,uDACA,uBAAGA,UAAU,aAAb,mBAGN,yBAAKO,MAAM,cCSNC,EAlBK,WAChB,OACJ,kBAAC,IAAMF,SAAP,KAEM,yBAAKN,UAAU,wBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCeQS,E,2MArBZC,MAAQ,G,wEAEJ,OACI,yBAAKV,UAAU,uBACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,eACX,kBAAC,EAAD,OAIA,yBAAKA,UAAU,wBACX,kBAAC,EAAD,a,GAZJW,aCYTC,MAdf,WACI,OACC,kBAAC,IAAMN,SAAP,KAEI,yBAAKN,UAAU,iBACZ,yBAAKA,UAAU,gBACX,0BAAMA,UAAU,cAAhB,iBACA,sYCiBDa,MAlBf,WACE,OACE,kBAAC,IAAD,KACM,yBAAKb,UAAU,OAGf,kBAACc,EAAD,MAEA,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,eAAeC,UAAYC,IAC3C,kBAAC,IAAD,CAAOF,KAAK,IAAIC,UAAWR,QCNnBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fa47aaa0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst signin = ()=>{\r\n    return(\r\n\r\n        <ul className='right'>\r\n            <li> <NavLink to='/'> New Project </NavLink>  </li>\r\n            <li> <NavLink to='/'> Log Out </NavLink>  </li>\r\n            <li> <NavLink to='/' className='btn btn-floating pink'> NN </NavLink>  </li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default signin;","import React, { Component } from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst signout = ()=>{\r\n    return(\r\n\r\n        <ul className='right'>\r\n            <li> <NavLink to='/'> Sign up </NavLink>  </li>\r\n            <li> <NavLink to='/'> Log In </NavLink>  </li>\r\n          \r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default signout;","import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport SigninLinks from './signin';\r\nimport SignoutLinks from './signout';\r\n\r\nconst navbar = ()=>{\r\n    return(\r\n\r\n        <nav className=\"nav-wrapper grey darken-3\" >\r\n            <div className='container'>\r\n                <Link to='/' className='brand-logo'> Mohamed Moussa </Link>\r\n                <SigninLinks />\r\n                <SignoutLinks />\r\n            </div>\r\n        </nav>\r\n\r\n    )\r\n}\r\n\r\nexport default navbar;","import React, { Component } from 'react';\r\n\r\nconst notifications = ()=>{\r\n    return(\r\n\r\n      <div>\r\n          Notifications\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default notifications;","import React, { Component } from 'react';\r\n\r\nconst projectsummary = ()=>{\r\n    return(\r\n\r\n      <React.Fragment>\r\n           <div className='card-panel project-summary hoverable'>\r\n            <div className='card-content grey-text text-darken-4 ' >\r\n                <span className='card-title blue-text '> <h3>card Title</h3> </span>\r\n                <p>Posted By mOhamed Moussa</p>\r\n                <p className='grey-text'> 3 Septembet </p>\r\n            </div>\r\n          </div>\r\n          <div class=\"divider\"></div>\r\n          </React.Fragment>\r\n \r\n    )\r\n}\r\n\r\nexport default projectsummary;","import React, { Component } from 'react';\r\nimport '../../App.css';\r\nimport ProjectSummary from './projectsummary';\r\n\r\nconst projectlist = ()=>{\r\n    return(\r\n<React.Fragment>\r\n\r\n      <div className='project-list section' >\r\n        <ProjectSummary />\r\n        <ProjectSummary />\r\n        <ProjectSummary />\r\n      </div>\r\n\r\n        \r\n      \r\n\r\n</React.Fragment>\r\n      \r\n    )\r\n}\r\n\r\nexport default projectlist;","import React, { Component } from 'react';\r\nimport Notifications from './notifications';\r\nimport ProjectList from '../project/projectlist';\r\n\r\nclass Dashboard extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n            <div className='dashboard container' >\r\n                <div className='row' >\r\n                    <div className='col s12 m6 ' >\r\n                        <ProjectList />\r\n                    </div>\r\n\r\n\r\n                        <div className='col s12 m5 offset-m1' >\r\n                            <Notifications />\r\n                        </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\n export default Dashboard;\r\n    ","import React from 'react'\r\n\r\nfunction projectdetails() {\r\n    return (\r\n     <React.Fragment>\r\n         \r\n         <div className='card  details'>\r\n            <div className='card-content'>\r\n                <span className='card-title' > Cardd Title </span>\r\n                <p>There are 4 colors and 3 sizes of circular spinners. The spinner should be nested in a preloader-wrapper div. The default size is medium, but you can add the classes big or small to adjust the size accordingly. You can add the classes spinner-red-only, spinner-blue-only, spinner-yellow-only and spinner-green-only. You can also leave this class as just  </p>\r\n            </div>\r\n         </div>\r\n     </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default projectdetails\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/layout/Navbar';\nimport {BrowserRouter,Switch,Route} from 'react-router-dom';\nimport Dashboard from './components/dashboard/dashboar';\nimport ProjectDetails from './components/project/projectdetails';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n          <div className=\"App\">\n\n\n          <Navbar />\n\n          <Switch>\n          <Route exact path='/project/:id' component={ ProjectDetails } />\n            <Route path='/' component={Dashboard} />\n           \n          </Switch>\n          </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}